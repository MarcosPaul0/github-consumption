generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  organization
  user
}

model Users {
  id              String   @id @default(uuid())
  login           String   @unique @db.VarChar(50)
  name            String   @db.VarChar(255)
  avatar_url      String   @db.VarChar(255)
  html_url        String   @db.VarChar(255)
  url             String   @unique
  site_admin      Boolean
  bio             String?
  location        String?
  type           UserType
  created_at      DateTime
  updated_at      DateTime

  follower Followers[] @relation("follower")
  following Followers[] @relation("following")
  collaborators Collaborators[]
  repositories Repositories[]

  @@map("users")
}

model Followers {
  id           String @id @default(uuid())

  follower_id  String
  user_follower Users @relation("follower", fields: [follower_id], references: [id])

  following_id String
  following Users @relation("following", fields: [following_id], references: [id])

  @@map("followers")
}

model Licenses {
  id   String @id @default(uuid())
  name String @db.VarChar(255)
  key  String @db.VarChar(30)
  url  String

  @@map("licenses")
}

model Events {
  id       String  @id @default(uuid())
  type     String  @db.VarChar(30)
  public   Boolean
  payload  Json
  repo_id  String
  actor_id String

  @@map("events")
}

model Repositories {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(30)
  full_name   String  @db.VarChar(60)
  private     Boolean
  html_url    String
  description String
  fork        Boolean
  download_url String
  url         String
  size        Int
  created_at DateTime
  updated_at DateTime
  pushed_at   DateTime

  code_requency CodeFrequency[]
  collaborators Collaborators[]

  owner_id    String
  owner Users @relation(fields: [owner_id], references: [id])

  @@map("repositories")
}

model Collaborators {
  id      String @id @default(uuid())

  user_id String
  user Users @relation(fields: [user_id], references: [id])

  repo_id String
  repository Repositories @relation(fields: [repo_id], references: [id])

  @@map("collaborators")
}

model CodeFrequency {
  id      String @id @default(uuid())
  date   DateTime
  additions Int
  deletions Int

  repo_id String
  repository Repositories @relation(fields: [repo_id], references: [id])

  @@map("code_frequency")
}